openapi: 3.0.0
info:
  title: AI Orchestrator API
  version: 1.0.0
  description: API for AI orchestration services
security:
  - BearerAuth: []
paths:

  /run/smartpod/{pod_id}:
    post:
      summary: Run SmartPod
      operationId: runSmartPod
      description: Run a SmartPod with a given query and optional parameters
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PodRequest'
      parameters:
        - in: path
          name: pod_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-codeSamples:
          - lang: python
            label: Python
            source: |
              from renforce import Renforce

              renforce = Renforce(api_token="ren13_xxxx")

              pod = renforce.smartpod.init(
                  pod_id="8c306691-8a4f-4e8e-82ce-29b0d3f5cc00",
                  access_to_sources=True,
                  lang="es"
              )


              result = pod.run(
                  query="my query",
                  data={"url": ["example.com"]}
              )

              print(result)
              
  /run/orchestrator:
    post:
      summary: Run AI orchestrator
      operationId: runOrchestrator
      description: Process a query using the specified AI model and optional attachments
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrchestratorRequest"
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrchestratorResponse"
      x-codeSamples:
        - lang: python
          label: Python
          source: |
            import base64
            from renforce import Renforce
            from renforce.data import RenImage, RenDocument
            from pathlib import Path

            renforce = Renforce(api_token="ren13_eXXX")

            renforce.orchestrator.init(
                model="gemini-1.5-flash-002",
                system_prompt="You are a helpful assistant.",
                output_prompt="Provide a concise response.",
                temperature=0.3,
                max_output_tokens=550,
                min_output_tokens=1
            )

            image_path = Path("planet.png")

            with open(image_path, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode("utf-8")

            image = RenImage(
                data=encoded_string,
                description="A planet image"
            )

            document = RenDocument(
                data="gs://testrenaiss/data_2.pdf",
                description="Proposal"
            )

            result = renforce.orchestrator.run(
                query="What is the company in the document?",
                context="The company is a startup that is developing a new technology to improve the way we live.",
                attachments=
            )

            print(result)

servers:
  - url: https://api.renforce.dev
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      name: Authorization
      in: header
      description: Enter your Bearer token in the format **Bearer <token>**
  schemas:
    OrchestratorRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
        model:
          type: string
          default: gemini-1.5-flash-002
          description: Model to use for processing
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        context:
          type: string
        system_prompt:
          type: string
        output_prompt:
          type: string
        temperature:
          type: number
          format: float
          minimum: 0
          maximum: 1
          default: 0.3
        max_output_tokens:
          type: integer
          default: 550
        min_output_tokens:
          type: integer
          default: 1
    Attachment:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum: [image, document]
        data:
          type: string
        description:
          type: string
        filename:
          type: string

    OrchestratorResponse:
      type: object
      properties:
        model_answer:
          type: string
        in_tokens:
          type: integer
        out_tokens:
          type: integer
          
    PodRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: The query to be processed by the SmartPod
        data:
          type: object
          description: Optional additional data for the query
        action_context:
          type: string
          description: Optional context for the action
        lang:
          type: string
          description: Optional language specification
        access_to_sources:
          type: boolean
          default: true
          description: Optional flag to allow access to sources
    
    PodResponse:
      type: object
      properties:
        result:
          type: string
          description: The response from the answer object, or 'Not response' if not available
        log_entry:
          type: object
          description: The dumped model of the log entry
    
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: A detailed error message
